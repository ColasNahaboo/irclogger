#!/bin/bash
# generates a CSS file for an IRC log
# takes a file NAMES with nicknames:
# nicknames for the same person on the same line (blank-separated)
# comments as lines beginning by a #
# and varies the hue around the color wheel
# The saturation and value are fixed, in the var $satval
set -a
satval=ff77

CHAN="${PATH_INFO#*/}"
file="${CHAN##*/}"
CHAN="${CHAN%%/*}"

. irclogger_common
DIR=$logsdir/$CHAN

page () {
  cat << EOF	
Content-type: text/css; charset: ISO-8859-1

/* IRC log CSS for names */
EOF
}

cd $DIR
page

main () {
  generate_rgb2hsvhex; generate_hsv2rgbhex
  names=`zgrep '^[^]]*[]] <' "$file" |sed -e 's/[^ ]* <//' -e 's/>.*//'|sort -i|uniq`
  numlines=`echo "$names" | wc -l`
  let hue_delta='2560/numlines'
  hue=0
  huehex=00

  for nick in $names ;do
    echo "td.$nick {color: #`hsv2rgb $huehex$satval`}"
    let hue=hue+hue_delta
    let huei=hue/10
    huehex=${hex[huei]}
  done
}

###################################################################### COLORS
rgb2hsv=/tmp/rgb2hsvhex
hsv2rgb=/tmp/hsv2rgbhex
rgb2hsv () {
  $rgb2hsv "$@"
}
hsv2rgb () {
  $hsv2rgb "$@"
}

colorname2rgb () {
  grep -i "^[ 	]*[0-9][0-9]*[ 	][ 	]*[0-9][0-9]*[ 	][ 	]*[0-9][0-9]*[ 	][ 	]*$1"'$' /usr/X11R6/lib/X11/rgb.txt | ( read R G B rest; 
  echo "${hex[$R]}${hex[$G]}${hex[$B]}"
  if [ -z "$B" ]; then echo "Error: colorname not found: $1" >&2; exit 1; fi
  if $verbose; then echo "$1: ($R,$G,$B): ${hex[$R]}${hex[$G]}${hex[$B]}" 1>&2; fi
  )
}

tolower () {
  echo "$1" | tr '[A-Z]' '[a-z]'
}


hex

generate_rgb2hsvhex () {
    if [ -x $rgb2hsv ]; then return
    fi
    rm -rf $rgb2hsv ${rgb2hsv}.c
    cat > ${rgb2hsv}.c << \EOF
/* code stolen from GTK */
#include <math.h>

#define MIN(a,b) (a<b?a:b)
#define MAX(a,b) (a>b?a:b)
#define NO_HUE   -1

/* Input:   r, g, b as hex-webstring
   Outputs: h, s, v as hex-webstring
*/
gtk_color_selection_rgb_to_hsv (double  r, double  g, double  b,
				double *h, double *s, double *v)
{
  double max, min, delta;

  max = r;
  if (g > max)
    max = g;
  if (b > max)
    max = b;

  min = r;
  if (g < min)
    min = g;
  if (b < min)
    min = b;

  *v = max;

  if (max != 0.0)
    *s = (max - min) / max;
  else
    *s = 0.0;

  if (*s == 0.0)
    *h = -1.0;
  else
    {
      delta = max - min;

      if (r == max)
	*h = (g - b) / delta;
      else if (g == max)
	*h = 2.0 + (b - r) / delta;
      else if (b == max)
	*h = 4.0 + (r - g) / delta;

      *h = *h * 60.0;

      if (*h < 0.0)
	*h = *h + 360;
    }
}

int main (int argc, char **argv)
{
    int ri, gi, bi, hi, si, vi;
    double r, g, b, h, s, v;

    if (argc == 2) {
	sscanf(argv[1], "%2x%2x%2x", &ri, &gi, &bi);
	r = ri; r /= 255;
	g = gi; g /= 255;
	b = bi; b /= 255;
	gtk_color_selection_rgb_to_hsv(r, g, b, &h, &s, &v);
	hi = (h/360)*255;
	si = s*255;
	vi = v*255;
	printf("%02x%02x%02x\n", hi,si, vi);
	return 0;
    } else
	return 1;
}
EOF
    cc -O -o $rgb2hsv ${rgb2hsv}.c
    chmod a+x $rgb2hsv; rm -f ${rgb2hsv}.c
}

generate_hsv2rgbhex () {
    if [ -x $hsv2rgb ]; then return
    fi
    rm -rf $hsv2rgb ${hsv2rgb}.c
    cat > ${hsv2rgb}.c << \EOF
/* code stolen from GTK */
#include <math.h>

#define MIN(a,b) (a<b?a:b)
#define MAX(a,b) (a>b?a:b)
#define NO_HUE   -1

/* Input:   r, g, b as hex-webstring
   Outputs: h, s, v as hex-webstring
*/
void
gtk_color_selection_hsv_to_rgb (double  h, double  s, double  v,
				double *r, double *g, double *b) {
  int i;
  double f, w, q, t;

  if (s == 0.0)
    s = 0.000001;

  if (h == -1.0) {
      *r = v; *g = v; *b = v;
    } else {
      if (h == 360.0) h = 0.0;
      h = h / 60.0;
      i = (int) h;
      f = h - i;
      w = v * (1.0 - s);
      q = v * (1.0 - (s * f));
      t = v * (1.0 - (s * (1.0 - f)));

      switch (i) {
	case 0: *r = v; *g = t; *b = w; break;
	case 1: *r = q; *g = v; *b = w; break;
	case 2: *r = w; *g = v; *b = t; break;
	case 3: *r = w; *g = q; *b = v; break;
	case 4: *r = t; *g = w; *b = v; break;
	case 5: *r = v; *g = w; *b = q; break;
	}
    }
}

int main (int argc, char **argv)
{
    int ri, gi, bi, hi, si, vi;
    double r, g, b, h, s, v;

    if (argc == 2) {
	sscanf(argv[1], "%2x%2x%2x", &hi, &si, &vi);
	h = hi * 360; h /= 255;
	s = si; s /= 255;
	v = vi; v /= 255;
	gtk_color_selection_hsv_to_rgb(h, s, v, &r, &g, &b);
	ri = r*255;
	gi = g*255;
	bi = b*255;
	printf("%02x%02x%02x\n", ri, gi, bi);
	return 0;
    } else
	return 1;
}
EOF
    cc -O -o $hsv2rgb ${hsv2rgb}.c
    chmod a+x $hsv2rgb; rm -f ${hsv2rgb}.c
}


###################################################################### MAIN

main

### EMACS MODES
### Local Variables: ***
### mode:ksh ***
### End: ***
